<?php

/**
 * Implements hook_entity_info().
 */
function bit_entity_info() {
  $return = array(
    'bit' => array(
      'label' => t('Bit'),
      'entity class' => 'Bit',
      'controller class' => 'BitController',
      'base table' => 'bit',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'btid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'bit_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'bit',
      'access callback' => 'bit_access',
    ),
  );
  $return['bit_type'] = array(
    'label' => t('Bit Type'),
    'entity class' => 'BitType',
    'controller class' => 'BitTypeController',
    'base table' => 'bit_type',
    'fieldable' => FALSE,
    'bundle of' => 'bit',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'bit',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/bit-types',
      'file' => 'bit.admin.inc',
      'controller class' => 'BitTypeUIController',
    ),
    'access callback' => 'bit_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function bit_entity_info_alter(&$entity_info) {
  foreach (bit_types() as $type => $info) {
    $entity_info['bit']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/bit-types/manage/%bit_type',
        'real path' => 'admin/structure/bit-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function bit_menu() {
  $items = array();

  $items['bit/add'] = array(
    'title' => 'Add bit',
    'page callback' => 'bit_admin_add_page',
    'access arguments' => array('administer bit entities'),
    'file' => 'bit.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'bit',
    'tab_root' => 'bit',
  );

  $bit_uri = 'bit/%bit';
  $bit_uri_argument_position = 1;

  $items[$bit_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('bit', $bit_uri_argument_position),
    'page callback' => 'bit_view',
    'page arguments' => array($bit_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'bit', $bit_uri_argument_position),
    'file' => 'bit.pages.inc',
  );

  $items[$bit_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$bit_uri . '/delete'] = array(
    'title' => 'Delete bit',
    'title callback' => 'bit_label',
    'title arguments' => array($bit_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bit_delete_form', $bit_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'bit', $bit_uri_argument_position),
    'file' => 'bit.admin.inc',
  );

  $items[$bit_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bit_form', $bit_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'bit', $bit_uri_argument_position),
    'file' => 'bit.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (bit_types() as $type => $info) {
    $items['bit/add/' . $type] = array(
      'title' => $info->label,
      'page callback' => 'bit_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'bit', $type),
      'file' => 'bit.admin.inc',
    );
  }

  $items['admin/structure/bit-types/%bit_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bit_type_form_delete_confirm', 3),
    'access arguments' => array('administer bit types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'bit.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bit_permission() {
  $permissions = array(
    'administer bit types' => array(
      'title' => t('Administer bit types'),
      'description' => t('Allows users to configure bit types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create bit entities' => array(
      'title' => t('Create bits'),
      'description' => t('Allows users to create bits.'),
      'restrict access' => TRUE,
    ),
    'view bit entities' => array(
      'title' => t('View bits'),
      'description' => t('Allows users to view bits.'),
      'restrict access' => TRUE,
    ),
    'edit any bit entities' => array(
      'title' => t('Edit any bits'),
      'description' => t('Allows users to edit any bits.'),
      'restrict access' => TRUE,
    ),
    'edit own bit entities' => array(
      'title' => t('Edit own bits'),
      'description' => t('Allows users to edit own bits.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function bit_entity_property_info_alter(&$info) {
  $properties = &$info['bit']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the bit."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer bit entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}


/*******************************************************************************
 ********************************* Bit API's **********************************
 ******************************************************************************/

/**
 * Access callback for bit.
 */
function bit_access($op, $bit, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer bit entities', $account)
          || user_access('create bit entities', $account);
    case 'view':
      return user_access('administer bit entities', $account)
          || user_access('view bit entities', $account);
    case 'edit':
      return user_access('administer bit entities')
          || user_access('edit any bit entities')
          || (user_access('edit own bit entities') && ($bit->uid == $account->uid));
  }
}

/**
 * Load a bit.
 */
function bit_load($btid, $reset = FALSE) {
  $bits = bit_load_multiple(array($btid), array(), $reset);
  return reset($bits);
}

/**
 * Load multiple bits based on certain conditions.
 */
function bit_load_multiple($btids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('bit', $btids, $conditions, $reset);
}

/**
 * Save bit.
 */
function bit_save($bit) {
  entity_save('bit', $bit);
}

/**
 * Delete single bit.
 */
function bit_delete($bit) {
  entity_delete('bit', entity_id('bit' ,$bit));
}

/**
 * Delete multiple bits.
 */
function bit_delete_multiple($bit_ids) {
  entity_delete_multiple('bit', $bit_ids);
}


/*******************************************************************************
 ****************************** Bit Type API's ********************************
 ******************************************************************************/

/**
 * Access callback for bit Type.
 */
function bit_type_access($op, $entity = NULL) {
  return user_access('administer bit types');
}

/**
 * Load bit Type.
 */
function bit_type_load($bit_type) {
  return bit_types($bit_type);
}

/**
 * List of bit Types.
 */
function bit_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('bit_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save bit type entity.
 */
function bit_type_save($bit_type) {
  entity_save('bit_type', $bit_type);
}

/**
 * Delete single case type.
 */
function bit_type_delete($bit_type) {
  entity_delete('bit_type', entity_id('bit_type' ,$bit_type));
}

/**
 * Delete multiple case types.
 */
function bit_type_delete_multiple($bit_type_ids) {
  entity_delete_multiple('bit_type', $bit_type_ids);
}

/**
  * Implements hook_views_api().
  */
function bit_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'bit'),
  );
}

/**
  * Implements hook_coffee_commands()
  */
function bit_coffee_commands($op) {
  $commands = array();

  foreach (bit_types() as $key => $value) {
    $commands[] = array(
      'value' => 'bit/add/' . $key,
      'label' => "Add " . $value->label,
    );
  }

  $commands[] = array(
    'value' => 'bit/',
    'label' => "Bit Content",
  );


  return $commands;
}

